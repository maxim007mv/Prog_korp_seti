/**
 * API Error class –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
export class ApiError extends Error {
  constructor(
    public statusCode: number,
    public code: string,
    message: string,
    public errors?: Record<string, string[]>
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

/**
 * –ë–∞–∑–æ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
class ApiClient {
  private baseUrl: string;

  constructor() {
    this.baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || process.env.API_BASE_URL || 'http://localhost:3001/api';
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async request<T>(
    endpoint: string,
    options?: RequestInit
  ): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;

    // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    console.group(`üåê API Request: ${options?.method || 'GET'} ${endpoint}`);
    console.log('üìç Full URL:', url);
    console.log('üì¶ Request body:', options?.body);
    console.log('üîß Headers:', options?.headers);
    console.groupEnd();

    try {
      const response = await fetch(url, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...options?.headers,
        },
        credentials: 'include', // –î–ª—è httpOnly cookies
      });

      // üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê
      console.group(`üì° API Response: ${options?.method || 'GET'} ${endpoint}`);
      console.log('‚úÖ Status:', response.status, response.statusText);
      console.log('üìÑ Response headers:', Object.fromEntries(response.headers.entries()));

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå Error response:', errorData);
        console.groupEnd();
        throw new ApiError(
          response.status,
          errorData.code || 'UNKNOWN_ERROR',
          errorData.message || `HTTP ${response.status}: ${response.statusText}`,
          errorData.errors
        );
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (204 No Content)
      if (response.status === 204) {
        console.log('‚úÖ Empty response (204 No Content)');
        console.groupEnd();
        return {} as T;
      }

      const data = await response.json();
      console.log('üì¶ Response data:', data);
      console.groupEnd();
      return data;
    } catch (error) {
      if (error instanceof ApiError) {
        console.error('üö® ApiError thrown:', error.message);
        throw error;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      console.group('üî• NETWORK ERROR');
      console.error('Error details:', error);
      console.error('Base URL:', this.baseUrl);
      console.error('Endpoint:', endpoint);
      console.groupEnd();
      
      throw new ApiError(
        0,
        'NETWORK_ERROR',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ ' + this.baseUrl
      );
    }
  }  /**
   * GET –∑–∞–ø—Ä–æ—Å
   */
  async get<T>(endpoint: string, params?: Record<string, any>): Promise<T> {
    const queryString = params
      ? '?' + new URLSearchParams(params).toString()
      : '';
    return this.request<T>(endpoint + queryString, { method: 'GET' });
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å
   */
  async post<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  /**
   * PATCH –∑–∞–ø—Ä–æ—Å
   */
  async patch<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PATCH',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å
   */
  async put<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å
   */
  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Blob (—Ñ–∞–π–ª–æ–≤)
   */
  async getBlob(endpoint: string, params?: Record<string, any>): Promise<Blob> {
    const queryString = params
      ? '?' + new URLSearchParams(params).toString()
      : '';
    const url = `${this.baseUrl}${endpoint}${queryString}`;

    try {
      const response = await fetch(url, {
        method: 'GET',
        credentials: 'include',
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new ApiError(
          response.status,
          errorData.code || 'UNKNOWN_ERROR',
          errorData.message || `HTTP ${response.status}: ${response.statusText}`,
          errorData.errors
        );
      }

      return response.blob();
    } catch (error) {
      if (error instanceof ApiError) {
        throw error;
      }

      console.error('Network error:', error);
      throw new ApiError(
        0,
        'NETWORK_ERROR',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
      );
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
export const apiClient = new ApiClient();
