'use client';

import { useQuery } from '@tanstack/react-query';
import { reportsApi } from '@/lib/api';
import type { ReportParams } from '@/types';

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è KPI –¥–∞—à–±–æ—Ä–¥–∞
 */
export function useDashboardKpi() {
  return useQuery({
    queryKey: ['dashboard', 'kpi'],
    queryFn: async () => {
      console.group('üìä Reports: –ó–∞–≥—Ä—É–∑–∫–∞ KPI –¥–∞—à–±–æ—Ä–¥–∞');
      try {
        const data = await reportsApi.getDashboardKpi();
        console.log('‚úÖ KPI –ø–æ–ª—É—á–µ–Ω—ã:', data);
        console.groupEnd();
        return data;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ KPI:', error);
        console.groupEnd();
        throw error;
      }
    },
    staleTime: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
  });
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ (—Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã - –ü–ó-4)
 */
export function useRevenueReport(params: ReportParams) {
  return useQuery({
    queryKey: ['reports', 'revenue', params],
    queryFn: async () => {
      console.group('üí∞ Reports: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ');
      console.log('Params:', params);
      try {
        const data = await reportsApi.getRevenueReport(params);
        console.log('‚úÖ –û—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω:', data);
        console.groupEnd();
        return data;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞:', error);
        console.groupEnd();
        throw error;
      }
    },
    enabled: !!(params.from && params.to),
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  });
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º
 */
export function useWaitersReport(params: ReportParams) {
  return useQuery({
    queryKey: ['reports', 'waiters', params],
    queryFn: async () => {
      console.group('üë®‚Äçüíº Reports: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º');
      console.log('Params:', params);
      try {
        const data = await reportsApi.getWaitersReport(params);
        console.log('‚úÖ –û—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω:', data);
        console.groupEnd();
        return data;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞:', error);
        console.groupEnd();
        throw error;
      }
    },
    enabled: !!(params.from && params.to),
    staleTime: 5 * 60 * 1000,
  });
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –±–ª—é–¥
 */
export function usePopularDishesReport(params: ReportParams) {
  return useQuery({
    queryKey: ['reports', 'popular', params],
    queryFn: async () => {
      console.group('üçΩÔ∏è Reports: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥');
      console.log('Params:', params);
      try {
        const data = await reportsApi.getPopularDishesReport(params);
        console.log('‚úÖ –û—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω:', data);
        console.groupEnd();
        return data;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞:', error);
        console.groupEnd();
        throw error;
      }
    },
    enabled: !!(params.from && params.to),
    staleTime: 5 * 60 * 1000,
  });
}
