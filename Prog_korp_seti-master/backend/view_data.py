#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import psycopg2
from psycopg2.extras import RealDictCursor

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': 'localhost',
    'database': 'restaurant_db',
    'user': 'postgres',
    'password': 'postgres123',
    'port': 5432
}

def show_sample_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        conn = psycopg2.connect(**DB_CONFIG, cursor_factory=RealDictCursor)
        cursor = conn.cursor()
        
        print("=" * 80)
        print("üìä –ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–• –ë–ê–ó–´ restaurant_db")
        print("=" * 80)
        print()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–ø–µ—Ä–≤—ã–µ 5):")
        print("-" * 80)
        cursor.execute("""
            SELECT user_id, username, email, role, is_active, created_at 
            FROM users 
            ORDER BY created_at DESC 
            LIMIT 5
        """)
        users = cursor.fetchall()
        for user in users:
            print(f"ID: {user['user_id']:3} | {user['username']:20} | {user['email']:30} | {user['role']:15} | –ê–∫—Ç–∏–≤–µ–Ω: {user['is_active']}")
        print()
        
        # –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã
        print("üçΩÔ∏è  –û–§–ò–¶–ò–ê–ù–¢–´ (–ø–µ—Ä–≤—ã–µ 5):")
        print("-" * 80)
        cursor.execute("""
            SELECT w.waiter_id, w.first_name, w.last_name, w.phone, w.is_active, u.username
            FROM waiters w
            LEFT JOIN users u ON w.user_id = u.user_id
            WHERE w.is_active = true
            ORDER BY w.waiter_id
            LIMIT 5
        """)
        waiters = cursor.fetchall()
        for waiter in waiters:
            username = waiter['username'] or 'N/A'
            print(f"ID: {waiter['waiter_id']:3} | {waiter['first_name']} {waiter['last_name']:20} | {waiter['phone']:15} | User: {username}")
        print()
        
        # –°—Ç–æ–ª—ã
        print("ü™ë –°–¢–û–õ–´ (–ø–µ—Ä–≤—ã–µ 10):")
        print("-" * 80)
        cursor.execute("""
            SELECT table_id, location, seats, is_active 
            FROM tables 
            WHERE is_active = true
            ORDER BY table_id
            LIMIT 10
        """)
        tables = cursor.fetchall()
        for table in tables:
            print(f"–°—Ç–æ–ª #{table['table_id']:3} | –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {table['location']:30} | –ú–µ—Å—Ç: {table['seats']:2}")
        print()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥
        print("üìã –ö–ê–¢–ï–ì–û–†–ò–ò –ë–õ–Æ–î:")
        print("-" * 80)
        cursor.execute("""
            SELECT c.category_id, c.category_name, COUNT(d.dish_id) as dish_count
            FROM dish_categories c
            LEFT JOIN dishes d ON c.category_id = d.category_id AND d.is_deleted = false
            GROUP BY c.category_id, c.category_name
            ORDER BY c.display_order, c.category_name
        """)
        categories = cursor.fetchall()
        for cat in categories:
            print(f"ID: {cat['category_id']:2} | {cat['category_name']:30} | –ë–ª—é–¥: {cat['dish_count']:4}")
        print()
        
        # –ë–ª—é–¥–∞
        print("üçï –ë–õ–Æ–î–ê (–ø–µ—Ä–≤—ã–µ 10 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö):")
        print("-" * 80)
        cursor.execute("""
            SELECT d.dish_id, d.dish_name, d.price, c.category_name, d.is_available
            FROM dishes d
            LEFT JOIN dish_categories c ON d.category_id = c.category_id
            WHERE d.is_deleted = false AND d.is_available = true
            ORDER BY d.dish_id
            LIMIT 10
        """)
        dishes = cursor.fetchall()
        for dish in dishes:
            cat_name = dish['category_name'] or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            print(f"ID: {dish['dish_id']:4} | {dish['dish_name']:40} | {dish['price']:7} ‚ÇΩ | {cat_name}")
        print()
        
        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)
        print("üìÖ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
        print("-" * 80)
        cursor.execute("""
            SELECT b.booking_id, b.client_name, b.client_phone, 
                   t.location, b.start_time, b.status
            FROM bookings b
            LEFT JOIN tables t ON b.table_id = t.table_id
            ORDER BY b.start_time DESC
            LIMIT 5
        """)
        bookings = cursor.fetchall()
        for booking in bookings:
            location = booking['location'] or 'N/A'
            print(f"ID: {booking['booking_id']:4} | {booking['client_name']:20} | {booking['client_phone']:15} | –°—Ç–æ–ª: {location:20} | {booking['start_time']} | {booking['status']}")
        print()
        
        # –ó–∞–∫–∞–∑—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)
        print("üõí –ó–ê–ö–ê–ó–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
        print("-" * 80)
        cursor.execute("""
            SELECT o.order_id, t.location, w.first_name || ' ' || w.last_name as waiter_name,
                   o.total_price, o.status, o.start_time
            FROM orders o
            LEFT JOIN tables t ON o.table_id = t.table_id
            LEFT JOIN waiters w ON o.waiter_id = w.waiter_id
            ORDER BY o.start_time DESC
            LIMIT 5
        """)
        orders = cursor.fetchall()
        for order in orders:
            waiter = order['waiter_name'] or 'N/A'
            location = order['location'] or 'N/A'
            print(f"ID: {order['order_id']:4} | –°—Ç–æ–ª: {location:20} | –û—Ñ–∏—Ü–∏–∞–Ω—Ç: {waiter:20} | –°—É–º–º–∞: {order['total_price']:8} ‚ÇΩ | {order['status']}")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 80)
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—É–º–º–∞
        cursor.execute("""
            SELECT COUNT(*) as total_orders, 
                   COALESCE(SUM(total_price), 0) as total_revenue
            FROM orders
            WHERE status IN ('–∑–∞–≤–µ—Ä—à—ë–Ω', '–æ–ø–ª–∞—á–µ–Ω')
        """)
        stats = cursor.fetchone()
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}")
        print(f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue']:,.2f} ‚ÇΩ")
        print()
        
        # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞
        cursor.execute("""
            SELECT d.dish_name, COUNT(*) as order_count, 
                   SUM(oi.quantity) as total_quantity
            FROM order_items oi
            JOIN dishes d ON oi.dish_id = d.dish_id
            GROUP BY d.dish_id, d.dish_name
            ORDER BY order_count DESC
            LIMIT 5
        """)
        popular = cursor.fetchall()
        print("üèÜ –¢–û–ü-5 –ü–û–ü–£–õ–Ø–†–ù–´–• –ë–õ–Æ–î:")
        for i, dish in enumerate(popular, 1):
            print(f"  {i}. {dish['dish_name']:40} - –∑–∞–∫–∞–∑–∞–Ω–æ {dish['order_count']} —Ä–∞–∑(–∞), –≤—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {dish['total_quantity']}")
        
        print()
        print("=" * 80)
        print("‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω!")
        print("=" * 80)
        
        cursor.close()
        conn.close()
        
    except psycopg2.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   {e}")

if __name__ == "__main__":
    show_sample_data()
