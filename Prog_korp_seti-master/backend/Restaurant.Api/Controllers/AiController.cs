using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using Restaurant.Infrastructure.Persistence;
using Restaurant.Domain.Entities;

namespace Restaurant.Api.Controllers
{
    [ApiController]
    [Route("api/ai")]
    public class AiController : ControllerBase
    {
        private readonly ILogger<AiController> _logger;
        private readonly AppDbContext _db;

        public AiController(ILogger<AiController> logger, AppDbContext db)
        {
            _logger = logger;
            _db = db;
        }

        /// <summary>
        /// AI —á–∞—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        /// </summary>
        [HttpPost("chat")]
        public async Task<IActionResult> Chat([FromBody] ChatRequest request)
        {
            try
            {
                _logger.LogInformation("AI Chat request: {Message}", request.Message);

                // Mock AI –æ—Ç–≤–µ—Ç—ã
                var response = GenerateMockAiResponse(request.Message);

                await Task.Delay(500); // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

                return Ok(new
                {
                    message = response,
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ AI —á–∞—Ç–µ");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞" });
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
        /// </summary>
        [HttpPost("upsell")]
        public IActionResult GetUpsellRecommendations([FromBody] UpsellRequest request)
        {
            try
            {
                _logger.LogInformation("AI Upsell request for order items: {Count}", request.OrderItems?.Length ?? 0);

                var recommendations = new[]
                {
                    new
                    {
                        dishId = 15,
                        dishName = "–î–µ—Å–µ—Ä—Ç –¢–∏—Ä–∞–º–∏—Å—É",
                        reason = "–û—Ç–ª–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–ª—é–¥–æ–º",
                        confidence = 0.92m
                    },
                    new
                    {
                        dishId = 23,
                        dishName = "–í–∏–Ω–æ –ö–∞–±–µ—Ä–Ω–µ",
                        reason = "–ò–¥–µ–∞–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç —Å—Ç–µ–π–∫",
                        confidence = 0.88m
                    },
                    new
                    {
                        dishId = 8,
                        dishName = "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å",
                        reason = "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∑–∞–∫—É—Å–∫–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–ª—é–¥—É",
                        confidence = 0.75m
                    }
                };

                return Ok(new
                {
                    recommendations = recommendations,
                    totalPotentialRevenue = 2450.0m
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π" });
            }
        }

        /// <summary>
        /// AI –ø–æ–∏—Å–∫ –ø–æ –º–µ–Ω—é
        /// </summary>
        [HttpGet("search")]
        public IActionResult SearchMenu([FromQuery] string query)
        {
            try
            {
                _logger.LogInformation("AI Search query: {Query}", query);

                var results = new[]
                {
                    new
                    {
                        dishId = 5,
                        dishName = "–°—Ç–µ–π–∫ –†–∏–±–∞–π",
                        relevanceScore = 0.95m,
                        reason = "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É"
                    },
                    new
                    {
                        dishId = 12,
                        dishName = "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
                        relevanceScore = 0.82m,
                        reason = "–ü–æ—Ö–æ–∂–µ–µ –±–ª—é–¥–æ"
                    }
                };

                return Ok(new
                {
                    query = query,
                    results = results,
                    suggestions = new[] { "—Å—Ç–µ–π–∫ –º–µ–¥–∏—É–º", "—Å—Ç–µ–π–∫ –≤–µ–ª–ª–¥–∞–Ω", "–≥–æ–≤—è–¥–∏–Ω–∞" }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –ø–æ–∏—Å–∫–µ");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ" });
            }
        }

        private string GenerateMockAiResponse(string message)
        {
            var lowerMessage = message.ToLower();

            if (lowerMessage.Contains("–≤—ã—Ä—É—á–∫–∞") || lowerMessage.Contains("–¥–æ—Ö–æ–¥"))
            {
                return "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ –≤—ã—Ä—É—á–∫–µ...\n\n" +
                       "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –≤—ã—Ä—É—á–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 1,250,000 ‚ÇΩ. –≠—Ç–æ –Ω–∞ 12% –≤—ã—à–µ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏. " +
                       "–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –¥–µ–Ω—å - –ø—è—Ç–Ω–∏—Ü–∞ (255,000 ‚ÇΩ). –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–ø–∞—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ.";
            }

            if (lowerMessage.Contains("–ø–æ–ø—É–ª—è—Ä–Ω") || lowerMessage.Contains("–±–ª—é–¥"))
            {
                return "üçΩÔ∏è –¢–æ–ø-3 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥–∞:\n\n" +
                       "1. –°—Ç–µ–π–∫ –†–∏–±–∞–π - 145 –∑–∞–∫–∞–∑–æ–≤\n" +
                       "2. –ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞ - 138 –∑–∞–∫–∞–∑–æ–≤\n" +
                       "3. –°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å - 132 –∑–∞–∫–∞–∑–∞\n\n" +
                       "–°—Ç–µ–π–∫ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –ø—Ä–∏–±—ã–ª—å. –°–æ–≤–µ—Ç—É—é –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é –Ω–∞ –∫–æ–º–±–æ —Å–æ —Å—Ç–µ–π–∫–æ–º.";
            }

            if (lowerMessage.Contains("—Å–æ—Ç—Ä—É–¥–Ω–∏–∫") || lowerMessage.Contains("–æ—Ñ–∏—Ü–∏–∞–Ω—Ç"))
            {
                return "üë• –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:\n\n" +
                       "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - –ª—É—á—à–∏–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –º–µ—Å—è—Ü–∞ (45 –∑–∞–∫–∞–∑–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ 4.8).\n" +
                       "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ - 3,654 ‚ÇΩ.\n" +
                       "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥ –ø–æ –¥–æ–ø—Ä–æ–¥–∞–∂–∞–º –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞.";
            }

            if (lowerMessage.Contains("—Ä–µ–∫–æ–º–µ–Ω–¥") || lowerMessage.Contains("—Å–æ–≤–µ—Ç"))
            {
                return "üí° AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞:\n\n" +
                       "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∑–æ–Ω–Ω–æ–µ –º–µ–Ω—é (–æ—Å–µ–Ω–Ω–∏–µ –±–ª—é–¥–∞)\n" +
                       "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n" +
                       "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n" +
                       "‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –±–ª—é–¥";
            }

            if (lowerMessage.Contains("–ø—Ä–∏–≤–µ—Ç") || lowerMessage.Contains("hello"))
            {
                return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n\n" +
                       "‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –≤—ã—Ä—É—á–∫–∏ –∏ –∑–∞–∫–∞–∑–æ–≤\n" +
                       "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –º–µ–Ω—é\n" +
                       "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n" +
                       "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∞–º–∏ —Å–ø—Ä–æ—Å–∞\n\n" +
                       "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!";
            }

            return "ü§ñ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. " +
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –≤—ã—Ä—É—á–∫–µ, –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥–∞—Ö, –ø–µ—Ä—Å–æ–Ω–∞–ª–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.";
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–º–µ–Ω—ã
        /// </summary>
        [HttpGet("digest/latest")]
        public async Task<IActionResult> GetLatestDigest()
        {
            try
            {
                _logger.LogInformation("üìä –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ AI –¥–∞–π–¥–∂–µ—Å—Ç–∞");

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (–¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å Analytics)
                var endDate = DateTime.UtcNow.Date.AddDays(1);
                var startDate = endDate.AddDays(-30);
                
                var allOrders = await _db.Orders
                    .Include(o => o.Items!)
                    .ThenInclude(i => i.Dish)
                    .Where(o => o.CreatedAt >= startDate && o.CreatedAt < endDate 
                        && (o.Status == "–∑–∞–∫—Ä—ã—Ç" || o.Status == "closed" || o.Status == "Completed"))
                    .OrderByDescending(o => o.CreatedAt)
                    .ToListAsync();

                if (!allOrders.Any())
                {
                    return Ok(new
                    {
                        id = 1,
                        date = DateTime.UtcNow.Date,
                        summary = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
                        insights = new[] { "–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤" },
                        recommendations = new object[] { },
                        metrics = new
                        {
                            revenue = 0m,
                            orderCount = 0,
                            avgCheck = 0m,
                            growth = new { revenue = 0.0, orders = 0.0 }
                        },
                        topDishes = new object[] { },
                        forecast = new
                        {
                            tomorrow = new
                            {
                                expectedRevenue = 0m,
                                expectedOrders = 0,
                                confidence = 0.0
                            }
                        },
                        createdAt = DateTime.UtcNow
                    });
                }

                // –†–∞–∑–¥–µ–ª–∏–º –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 30 –¥–Ω–µ–π (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–æ—Å—Ç–∞)
                var prevStartDate = startDate.AddDays(-30);
                var prevOrders = await _db.Orders
                    .Where(o => o.CreatedAt >= prevStartDate && o.CreatedAt < startDate 
                        && (o.Status == "–∑–∞–∫—Ä—ã—Ç" || o.Status == "closed" || o.Status == "Completed"))
                    .ToListAsync();

                // –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ (30 –¥–Ω–µ–π)
                var recentRevenue = allOrders.Sum(o => o.TotalPrice);
                var recentOrderCount = allOrders.Count;
                var avgCheck = recentOrderCount > 0 ? recentRevenue / recentOrderCount : 0;

                // –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ 30 –¥–Ω–µ–π)
                var olderRevenue = prevOrders.Sum(o => o.TotalPrice);
                var olderOrderCount = prevOrders.Count;

                // –°—á–∏—Ç–∞–µ–º —Ä–æ—Å—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                var revenueGrowth = olderRevenue > 0 
                    ? (double)((recentRevenue - olderRevenue) / olderRevenue * 100) 
                    : 0;
                var ordersGrowth = olderOrderCount > 0 
                    ? (double)((recentOrderCount - olderOrderCount) / (decimal)olderOrderCount * 100) 
                    : 0;

                // –¢–æ–ø-–±–ª—é–¥–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
                var topDish = allOrders
                    .SelectMany(o => o.Items ?? new List<OrderItem>())
                    .Where(i => i.Dish != null)
                    .GroupBy(i => new { i.Dish!.Id, i.Dish.Name })
                    .Select(g => new { 
                        DishName = g.Key.Name, 
                        Count = g.Count() 
                    })
                    .OrderByDescending(x => x.Count)
                    .FirstOrDefault();

                var summary = $"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {recentOrderCount} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {recentRevenue:N0} —Ä—É–±.";
                if (topDish != null)
                {
                    summary += $" –°–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –±–ª—é–¥–æ - {topDish.DishName} ({topDish.Count} –∑–∞–∫–∞–∑–æ–≤).";
                }

                var digest = new
                {
                    id = 1,
                    date = DateTime.UtcNow.Date,
                    summary = summary,
                    insights = new[]
                    {
                        revenueGrowth > 0 
                            ? $"–í—ã—Ä—É—á–∫–∞ –≤—ã—à–µ –Ω–∞ {revenueGrowth:F1}% vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 30 –¥–Ω–µ–π" 
                            : $"–í—ã—Ä—É—á–∫–∞ –Ω–∏–∂–µ –Ω–∞ {Math.Abs(revenueGrowth):F1}% vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 30 –¥–Ω–µ–π",
                        recentOrderCount > 100 ? "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞" : "–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞",
                        topDish != null ? $"–¢–æ–ø-–±–ª—é–¥–æ: {topDish.DishName}" : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–ª—é–¥–∞–º"
                    },
                    recommendations = new[]
                    {
                        new
                        {
                            type = "menu_optimization",
                            title = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ–Ω—é",
                            description = "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª—é–¥",
                            actionItems = new[] { "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "–£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–∫—É–ø–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ–ø-–±–ª—é–¥" },
                            priority = 1,
                            confidence = 0.85
                        }
                    },
                    metrics = new
                    {
                        revenue = recentRevenue,
                        orderCount = recentOrderCount,
                        avgCheck = avgCheck,
                        growth = new
                        {
                            revenue = revenueGrowth,
                            orders = ordersGrowth
                        }
                    },
                    topDishes = allOrders
                        .SelectMany(o => o.Items ?? new List<OrderItem>())
                        .Where(i => i.Dish != null)
                        .GroupBy(i => new { i.Dish!.Id, i.Dish.Name })
                        .Select(g => new { 
                            id = g.Key.Id,
                            name = g.Key.Name, 
                            count = g.Count(),
                            revenue = g.Sum(i => i.Price * i.Quantity)
                        })
                        .OrderByDescending(x => x.count)
                        .Take(5)
                        .ToList(),
                    forecast = new
                    {
                        tomorrow = new
                        {
                            expectedRevenue = avgCheck * recentOrderCount / 30 * 1.05m, // –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ +5%
                            expectedOrders = (int)(recentOrderCount / 30 * 1.05),
                            confidence = 0.78
                        }
                    },
                    createdAt = DateTime.UtcNow
                };

                return Ok(digest);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞" });
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        /// </summary>
        [HttpGet("recommendations")]
        public IActionResult GetRecommendations([FromQuery] string? targetRole = null)
        {
            try
            {
                _logger.LogInformation("üí° –ó–∞–ø—Ä–æ—Å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ä–æ–ª–∏: {Role}", targetRole ?? "any");

                var recommendations = new[]
                {
                    new
                    {
                        id = 1,
                        type = "revenue",
                        priority = "high",
                        title = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ–Ω—é",
                        description = "–ë–ª—é–¥–∞ —Å –Ω–∏–∑–∫–æ–π –º–∞—Ä–∂–æ–π –∑–∞–Ω–∏–º–∞—é—Ç 25% –∑–∞–∫–∞–∑–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –∏–ª–∏ —É–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é.",
                        impact = "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 12-15%",
                        actionItems = new[]
                        {
                            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø-10 –±–ª—é–¥",
                            "–ü–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 5-7%",
                            "–£–±—Ä–∞—Ç—å 3 —É–±—ã—Ç–æ—á–Ω—ã—Ö –±–ª—é–¥–∞ –∏–∑ –º–µ–Ω—é"
                        },
                        estimatedRevenue = 45000.0m,
                        confidence = 0.87m,
                        createdAt = DateTime.UtcNow.AddDays(-1)
                    },
                    new
                    {
                        id = 2,
                        type = "operations",
                        priority = "medium",
                        title = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
                        description = "–í –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ 40% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π, –Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.",
                        impact = "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ 25%",
                        actionItems = new[]
                        {
                            "–î–æ–±–∞–≤–∏—Ç—å 2 –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –≤ –ø—è—Ç–Ω–∏—Ü—É 18:00-22:00",
                            "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∏—Å—Ç–µ–º—É –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–∞–±–æ—Ç—É –≤ —á–∞—Å—ã –ø–∏–∫"
                        },
                        estimatedRevenue = 0.0m,
                        confidence = 0.92m,
                        createdAt = DateTime.UtcNow.AddDays(-2)
                    },
                    new
                    {
                        id = 3,
                        type = "marketing",
                        priority = "low",
                        title = "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –¥–µ—Å–µ—Ä—Ç—ã",
                        description = "–¢–æ–ª—å–∫–æ 15% –≥–æ—Å—Ç–µ–π –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –¥–µ—Å–µ—Ä—Ç—ã. –ê–∫—Ü–∏—è '–î–µ—Å–µ—Ä—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫' –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å.",
                        impact = "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –Ω–∞ 8%",
                        actionItems = new[]
                        {
                            "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫—Ü–∏—é –Ω–∞ –Ω–µ–¥–µ–ª—é",
                            "–û–±—É—á–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–µ—Å–µ—Ä—Ç—ã",
                            "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–µ—Å–µ—Ä—Ç–æ–≤ –≤ –º–µ–Ω—é"
                        },
                        estimatedRevenue = 28000.0m,
                        confidence = 0.75m,
                        createdAt = DateTime.UtcNow.AddDays(-3)
                    }
                };

                return Ok(new
                {
                    recommendations = recommendations,
                    totalEstimatedImpact = 73000.0m,
                    generatedAt = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π" });
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
        /// </summary>
        [HttpGet("predictions/tables")]
        public async Task<IActionResult> GetTablePredictions()
        {
            try
            {
                _logger.LogInformation("üìä –ó–∞–ø—Ä–æ—Å AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–∏–∫–æ–≤");

                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                var startDate = DateTime.UtcNow.Date.AddDays(-30);
                var endDate = DateTime.UtcNow.Date.AddDays(1);

                var orders = await _db.Orders
                    .Where(o => o.CreatedAt >= startDate && o.CreatedAt < endDate 
                        && (o.Status == "closed" || o.Status == "Completed" || o.Status == "–∑–∞–∫—Ä—ã—Ç"))
                    .Select(o => new {
                        o.TableId,
                        o.TotalPrice,
                        Hour = o.CreatedAt.Hour,
                        DayOfWeek = (int)o.CreatedAt.DayOfWeek,
                        Date = o.CreatedAt.Date
                    })
                    .ToListAsync();

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–æ–ª–∏–∫–∞–º
                var tableStats = orders
                    .GroupBy(o => o.TableId)
                    .Select(g => new {
                        tableId = g.Key,
                        totalOrders = g.Count(),
                        totalRevenue = g.Sum(o => o.TotalPrice),
                        avgRevenue = g.Average(o => (double)o.TotalPrice),
                        peakHours = g.GroupBy(o => o.Hour).OrderByDescending(h => h.Count()).Take(3).Select(h => h.Key).ToList(),
                        peakDays = g.GroupBy(o => o.DayOfWeek).OrderByDescending(d => d.Count()).Take(3).Select(d => d.Key).ToList()
                    })
                    .OrderByDescending(t => t.totalOrders)
                    .Take(10)
                    .ToList();

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
                var predictions = new List<object>();
                for (int dayOffset = 0; dayOffset < 7; dayOffset++)
                {
                    var targetDate = DateTime.UtcNow.Date.AddDays(dayOffset);
                    var dayOfWeek = (int)targetDate.DayOfWeek;
                    
                    // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —á–∞—Å–∞–º
                    var hourlyPredictions = new List<object>();
                    for (int hour = 10; hour <= 22; hour++)
                    {
                        // –°—á–∏—Ç–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                        var ordersInThisHour = orders.Count(o => 
                            o.DayOfWeek == dayOfWeek && o.Hour == hour
                        );
                        var totalOrdersOnThisDay = orders.Count(o => o.DayOfWeek == dayOfWeek);
                        var occupancyRate = totalOrdersOnThisDay > 0 
                            ? (double)ordersInThisHour / totalOrdersOnThisDay * 100 
                            : 0;

                        hourlyPredictions.Add(new {
                            hour = hour,
                            occupancyRate = Math.Round(Math.Min(occupancyRate * 5, 95), 1), // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 95%
                            expectedOrders = Math.Max(1, ordersInThisHour / 4), // –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 30 –¥–Ω–µ–π
                            confidence = 0.75 + (ordersInThisHour > 0 ? 0.15 : 0)
                        });
                    }

                    // –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞ –¥–µ–Ω—å
                    var avgOccupancy = hourlyPredictions.Any() 
                        ? hourlyPredictions.Average(h => (double)h.GetType().GetProperty("occupancyRate")!.GetValue(h)!)
                        : 0;

                    predictions.Add(new {
                        date = targetDate,
                        dayOfWeek = new[] { "–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±" }[dayOfWeek],
                        avgOccupancyRate = Math.Round(avgOccupancy, 1),
                        hourlyPredictions = hourlyPredictions,
                        expectedRevenue = orders.Where(o => o.DayOfWeek == dayOfWeek).Average(o => (double?)o.TotalPrice) * 
                                         hourlyPredictions.Sum(h => (int)h.GetType().GetProperty("expectedOrders")!.GetValue(h)!) ?? 0,
                        topTables = tableStats
                            .Where(t => t.peakDays.Contains(dayOfWeek))
                            .Take(5)
                            .Select(t => new { 
                                tableId = t.tableId, 
                                expectedOrders = t.totalOrders / 30 * 1.2 // –ü—Ä–æ–≥–Ω–æ–∑ +20%
                            })
                            .ToList()
                    });
                }

                return Ok(new {
                    predictions = predictions,
                    topTables = tableStats.Select(t => new {
                        tableId = t.tableId,
                        totalOrders = t.totalOrders,
                        totalRevenue = Math.Round(t.totalRevenue, 2),
                        avgRevenue = Math.Round(t.avgRevenue, 2),
                        peakHours = t.peakHours,
                        peakDays = t.peakDays.Select(d => new[] { "–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±" }[d]).ToList()
                    }).ToList(),
                    mostPopularDish = orders.Any() ? "–°—Ç–µ–π–∫ –†–∏–±–∞–π" : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                    generatedAt = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å—Ç–æ–ª–∏–∫–æ–≤");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π" });
            }
        }
    }

    public class ChatRequest
    {
        public string Message { get; set; } = string.Empty;
    }

    public class UpsellRequest
    {
        public int[]? OrderItems { get; set; }
    }
}
