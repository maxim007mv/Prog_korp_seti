using Npgsql;
using System;
using System.Collections.Generic;

class Program
{
    static async Task Main(string[] args)
    {
        var connectionString = "Host=localhost;Port=5432;Database=restaurant_db;Username=postgres;Password=postgres";
        
        await using var connection = new NpgsqlConnection(connectionString);
        await connection.OpenAsync();
        
        Console.WriteLine("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n");
        
        // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await CreateUsers(connection);
        
        // 2. –°–æ–∑–¥–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
        await CreateWaiters(connection);
        
        // 3. –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ—à–ª—ã–µ –∏ –±—É–¥—É—â–∏–µ)
        await CreateBookings(connection);
        
        // 4. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π (250 –∑–∞–∫–∞–∑–æ–≤)
        await CreateOrders(connection);
        
        Console.WriteLine("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        Console.WriteLine("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        await PrintStatistics(connection);
    }
    
    static async Task CreateUsers(NpgsqlConnection connection)
    {
        Console.WriteLine("üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
        
        var users = new List<(string Email, string Username, string Password, string Role)>
        {
            ("admin@restaurant.com", "admin", "$2a$11$abcdefghijklmnopqrstuv", "Admin"),
            ("waiter1@restaurant.com", "waiter1", "$2a$11$abcdefghijklmnopqrstuv", "Waiter"),
            ("waiter2@restaurant.com", "waiter2", "$2a$11$abcdefghijklmnopqrstuv", "Waiter"),
            ("waiter3@restaurant.com", "waiter3", "$2a$11$abcdefghijklmnopqrstuv", "Waiter"),
            ("client1@restaurant.com", "client1", "$2a$11$abcdefghijklmnopqrstuv", "Client"),
            ("client2@restaurant.com", "client2", "$2a$11$abcdefghijklmnopqrstuv", "Client")
        };
        
        foreach (var user in users)
        {
            var sql = @"
                INSERT INTO users (email, username, password_hash, role, created_at)
                VALUES (@email, @username, @password, @role, NOW())
                ON CONFLICT (username) DO NOTHING";
                
            await using var cmd = new NpgsqlCommand(sql, connection);
            cmd.Parameters.AddWithValue("email", user.Email);
            cmd.Parameters.AddWithValue("username", user.Username);
            cmd.Parameters.AddWithValue("password", user.Password);
            cmd.Parameters.AddWithValue("role", user.Role);
            await cmd.ExecuteNonQueryAsync();
        }
        
        Console.WriteLine("   ‚úì –°–æ–∑–¥–∞–Ω–æ 6 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }
    
    static async Task CreateWaiters(NpgsqlConnection connection)
    {
        Console.WriteLine("üçΩÔ∏è  –°–æ–∑–¥–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤...");
        
        var waiterUserIds = new List<int>();
        var sql = "SELECT user_id FROM users WHERE role = 'Waiter'";
        await using var cmd = new NpgsqlCommand(sql, connection);
        await using var reader = await cmd.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            waiterUserIds.Add(reader.GetInt32(0));
        }
        await reader.CloseAsync();
        
        var waiterNames = new[] 
        { 
            ("–ò–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤"), 
            ("–ú–∞—Ä–∏—è", "–°–∏–¥–æ—Ä–æ–≤–∞"), 
            ("–ê–ª–µ–∫—Å–µ–π", "–°–º–∏—Ä–Ω–æ–≤") 
        };
        
        for (int i = 0; i < waiterUserIds.Count && i < waiterNames.Length; i++)
        {
            var insertSql = @"
                INSERT INTO waiters (user_id, first_name, last_name, phone, hire_date, is_active)
                VALUES (@userId, @firstName, @lastName, @phone, @hireDate, true)
                ON CONFLICT (user_id) DO NOTHING";
                
            await using var insertCmd = new NpgsqlCommand(insertSql, connection);
            insertCmd.Parameters.AddWithValue("userId", waiterUserIds[i]);
            insertCmd.Parameters.AddWithValue("firstName", waiterNames[i].Item1);
            insertCmd.Parameters.AddWithValue("lastName", waiterNames[i].Item2);
            insertCmd.Parameters.AddWithValue("phone", $"+7916123456{i}");
            insertCmd.Parameters.AddWithValue("hireDate", DateTime.Now.AddMonths(-Random.Shared.Next(1, 12)));
            await insertCmd.ExecuteNonQueryAsync();
        }
        
        Console.WriteLine($"   ‚úì –°–æ–∑–¥–∞–Ω–æ {waiterUserIds.Count} –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤");
    }
    
    static async Task CreateBookings(NpgsqlConnection connection)
    {
        Console.WriteLine("üìÖ –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...");
        
        var names = new[] { "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", "–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤", "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", 
                           "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤", "–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞", "–°–µ—Ä–≥–µ–π –ú–æ—Ä–æ–∑–æ–≤", "–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞",
                           "–ù–∏–∫–æ–ª–∞–π –§–µ–¥–æ—Ä–æ–≤", "–¢–∞—Ç—å—è–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞" };
        var phones = new[] { "+79161234567", "+79162345678", "+79163456789", "+79164567890",
                            "+79165678901", "+79166789012", "+79167890123", "+79168901234",
                            "+79169012345", "+79160123456" };
        
        var bookingCount = 0;
        
        // –ü—Ä–æ—à–ª—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        for (int i = 0; i < 1500; i++)
        {
            var daysAgo = Random.Shared.Next(1, 30);
            var startTime = DateTime.Now.AddDays(-daysAgo).AddHours(Random.Shared.Next(10, 20));
            var endTime = startTime.AddHours(Random.Shared.Next(1, 3));
            var tableId = Random.Shared.Next(1, 7); // –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ 6 —Å—Ç–æ–ª–æ–≤ (1-6)
            var guestCount = Random.Shared.Next(2, 6);
            var nameIdx = Random.Shared.Next(names.Length);
            
            var sql = @"
                INSERT INTO bookings (table_id, client_name, client_phone, start_time, end_time, guest_count, status, created_at)
                VALUES (@tableId, @clientName, @clientPhone, @startTime, @endTime, @guestCount, 'Completed', @createdAt)";
                
            await using var cmd = new NpgsqlCommand(sql, connection);
            cmd.Parameters.AddWithValue("tableId", tableId);
            cmd.Parameters.AddWithValue("clientName", names[nameIdx]);
            cmd.Parameters.AddWithValue("clientPhone", phones[nameIdx]);
            cmd.Parameters.AddWithValue("startTime", startTime);
            cmd.Parameters.AddWithValue("endTime", endTime);
            cmd.Parameters.AddWithValue("guestCount", guestCount);
            cmd.Parameters.AddWithValue("createdAt", startTime.AddDays(-1));
            await cmd.ExecuteNonQueryAsync();
            bookingCount++;
        }
        
        // –ë—É–¥—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–ª–µ–¥—É—é—â–∏–µ 14 –¥–Ω–µ–π)
        for (int i = 0; i < 500; i++)
        {
            var daysAhead = Random.Shared.Next(0, 14);
            var startTime = DateTime.Now.AddDays(daysAhead).AddHours(Random.Shared.Next(10, 20));
            var endTime = startTime.AddHours(Random.Shared.Next(1, 3));
            var tableId = Random.Shared.Next(1, 7); // –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ 6 —Å—Ç–æ–ª–æ–≤ (1-6)
            var guestCount = Random.Shared.Next(2, 6);
            var nameIdx = Random.Shared.Next(names.Length);
            
            var statuses = new[] { "Confirmed", "Pending" };
            var status = statuses[Random.Shared.Next(statuses.Length)];
            
            var sql = @"
                INSERT INTO bookings (table_id, client_name, client_phone, start_time, end_time, guest_count, status, created_at)
                VALUES (@tableId, @clientName, @clientPhone, @startTime, @endTime, @guestCount, @status, NOW())";
                
            await using var cmd = new NpgsqlCommand(sql, connection);
            cmd.Parameters.AddWithValue("tableId", tableId);
            cmd.Parameters.AddWithValue("clientName", names[nameIdx]);
            cmd.Parameters.AddWithValue("clientPhone", phones[nameIdx]);
            cmd.Parameters.AddWithValue("startTime", startTime);
            cmd.Parameters.AddWithValue("endTime", endTime);
            cmd.Parameters.AddWithValue("guestCount", guestCount);
            cmd.Parameters.AddWithValue("status", status);
            await cmd.ExecuteNonQueryAsync();
            bookingCount++;
        }
        
        Console.WriteLine($"   ‚úì –°–æ–∑–¥–∞–Ω–æ {bookingCount} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (1500 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö, 500 –±—É–¥—É—â–∏—Ö)");
    }
    
    static async Task CreateOrders(NpgsqlConnection connection)
    {
        Console.WriteLine("üßæ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π...");
        
        // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
        var waiterIds = new List<int>();
        var waiterSql = "SELECT waiter_id FROM waiters";
        await using (var cmd = new NpgsqlCommand(waiterSql, connection))
        {
            await using var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                waiterIds.Add(reader.GetInt32(0));
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID –±–ª—é–¥
        var dishIds = new List<(int Id, decimal Price)>();
        var dishSql = "SELECT dish_id, price FROM dishes";
        await using (var cmd = new NpgsqlCommand(dishSql, connection))
        {
            await using var reader = await cmd.ExecuteReaderAsync();
            while (await reader.ReadAsync())
            {
                dishIds.Add((reader.GetInt32(0), reader.GetDecimal(1)));
            }
        }
        
        var totalOrders = 250;
        var targetRevenue = 10_000_000m; // 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π
        var avgOrderAmount = targetRevenue / totalOrders; // ~40,000 —Ä—É–±–ª–µ–π –Ω–∞ –∑–∞–∫–∞–∑
        
        var orderCount = 0;
        var totalRevenue = 0m;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        for (int i = 0; i < totalOrders; i++)
        {
            var daysAgo = Random.Shared.Next(0, 90);
            var orderTime = DateTime.Now.AddDays(-daysAgo).AddHours(Random.Shared.Next(10, 22));
            var tableId = Random.Shared.Next(1, 7);
            var waiterId = waiterIds[Random.Shared.Next(waiterIds.Count)];
            
            // 95% –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, 5% –æ—Ç–º–µ–Ω–µ–Ω—ã
            var status = Random.Shared.Next(100) < 95 ? "Completed" : "Cancelled";
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            var orderSql = @"
                INSERT INTO orders (table_id, waiter_id, status, total_price, start_time, end_time, created_at, updated_at)
                VALUES (@tableId, @waiterId, @status, 0, @startTime, @endTime, @createdAt, @updatedAt)
                RETURNING order_id";
                
            int orderId;
            await using (var cmd = new NpgsqlCommand(orderSql, connection))
            {
                cmd.Parameters.AddWithValue("tableId", tableId);
                cmd.Parameters.AddWithValue("waiterId", waiterId);
                cmd.Parameters.AddWithValue("status", status);
                cmd.Parameters.AddWithValue("startTime", orderTime);
                cmd.Parameters.AddWithValue("endTime", orderTime.AddMinutes(90));
                cmd.Parameters.AddWithValue("createdAt", orderTime);
                cmd.Parameters.AddWithValue("updatedAt", orderTime.AddMinutes(60));
                orderId = (int)(await cmd.ExecuteScalarAsync() ?? 0);
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ä–∞–∑–±—Ä–æ—Å–æ–º (¬±20%)
            var targetAmount = avgOrderAmount * (decimal)(0.8 + Random.Shared.NextDouble() * 0.4);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º—ã
            var orderTotal = 0m;
            var itemCount = Random.Shared.Next(3, 10); // –û—Ç 3 –¥–æ 9 –ø–æ–∑–∏—Ü–∏–π
            
            for (int j = 0; j < itemCount; j++)
            {
                var dish = dishIds[Random.Shared.Next(dishIds.Count)];
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º–µ
                var remainingAmount = targetAmount - orderTotal;
                var maxQuantity = Math.Max(1, (int)(remainingAmount / dish.Price));
                var quantity = Random.Shared.Next(1, Math.Min(maxQuantity, 20) + 1);
                
                var itemTotal = dish.Price * quantity;
                
                var itemSql = @"
                    INSERT INTO order_items (order_id, dish_id, quantity, price, status)
                    VALUES (@orderId, @dishId, @quantity, @price, 'delivered')";
                    
                await using var itemCmd = new NpgsqlCommand(itemSql, connection);
                itemCmd.Parameters.AddWithValue("orderId", orderId);
                itemCmd.Parameters.AddWithValue("dishId", dish.Id);
                itemCmd.Parameters.AddWithValue("quantity", quantity);
                itemCmd.Parameters.AddWithValue("price", dish.Price);
                await itemCmd.ExecuteNonQueryAsync();
                
                orderTotal += itemTotal;
                
                // –ï—Å–ª–∏ –ø—Ä–∏–±–ª–∏–∑–∏–ª–∏—Å—å –∫ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º–µ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if (orderTotal >= targetAmount * 0.9m)
                    break;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
            var updateSql = "UPDATE orders SET total_price = @total WHERE order_id = @id";
            await using (var updateCmd = new NpgsqlCommand(updateSql, connection))
            {
                updateCmd.Parameters.AddWithValue("total", orderTotal);
                updateCmd.Parameters.AddWithValue("id", orderId);
                await updateCmd.ExecuteNonQueryAsync();
            }
            
            if (status == "Completed")
            {
                totalRevenue += orderTotal;
            }
            
            orderCount++;
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å
            if (orderCount % 50 == 0)
            {
                Console.WriteLine($"   üìä –°–æ–∑–¥–∞–Ω–æ {orderCount}/{totalOrders} –∑–∞–∫–∞–∑–æ–≤, –≤—ã—Ä—É—á–∫–∞: {totalRevenue:N0} ‚ÇΩ");
            }
        }
        
        Console.WriteLine($"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {orderCount} –∑–∞–∫–∞–∑–æ–≤");
        Console.WriteLine($"   üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {totalRevenue:N2} ‚ÇΩ");
        Console.WriteLine($"   üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {(totalRevenue / orderCount):N2} ‚ÇΩ");
    }
    
    static async Task PrintStatistics(NpgsqlConnection connection)
    {
        // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        var bookingSql = @"
            SELECT 
                COUNT(*) as total,
                COUNT(*) FILTER (WHERE status = 'Completed') as completed,
                COUNT(*) FILTER (WHERE status = 'Confirmed') as confirmed,
                COUNT(*) FILTER (WHERE status = 'Pending') as pending
            FROM bookings";
            
        await using (var cmd = new NpgsqlCommand(bookingSql, connection))
        {
            await using var reader = await cmd.ExecuteReaderAsync();
            if (await reader.ReadAsync())
            {
                Console.WriteLine($"\nüìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:");
                Console.WriteLine($"   –í—Å–µ–≥–æ: {reader.GetInt32(0)}");
                Console.WriteLine($"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {reader.GetInt32(1)}");
                Console.WriteLine($"   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {reader.GetInt32(2)}");
                Console.WriteLine($"   –û–∂–∏–¥–∞–µ—Ç: {reader.GetInt32(3)}");
            }
        }
        
        // –ó–∞–∫–∞–∑—ã
        var orderSql = @"
            SELECT 
                COUNT(*) as total,
                COUNT(*) FILTER (WHERE status = 'Completed') as completed,
                SUM(total_price) FILTER (WHERE status = 'Completed') as revenue,
                AVG(total_price) FILTER (WHERE status = 'Completed') as avg_check
            FROM orders";
            
        await using (var cmd = new NpgsqlCommand(orderSql, connection))
        {
            await using var reader = await cmd.ExecuteReaderAsync();
            if (await reader.ReadAsync())
            {
                Console.WriteLine($"\nüßæ –ó–∞–∫–∞–∑—ã:");
                Console.WriteLine($"   –í—Å–µ–≥–æ: {reader.GetInt32(0)}");
                Console.WriteLine($"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {reader.GetInt32(1)}");
                Console.WriteLine($"   –í—ã—Ä—É—á–∫–∞: {reader.GetDecimal(2):N2} ‚ÇΩ");
                Console.WriteLine($"   –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {reader.GetDecimal(3):N2} ‚ÇΩ");
            }
        }
        
        // –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã
        var waiterSql = "SELECT COUNT(*) FROM waiters";
        await using (var cmd = new NpgsqlCommand(waiterSql, connection))
        {
            var count = (long)(await cmd.ExecuteScalarAsync() ?? 0);
            Console.WriteLine($"\nüçΩÔ∏è  –û—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {count}");
        }
        
        // –ë–ª—é–¥–∞
        var dishSql = "SELECT COUNT(*) FROM dishes";
        await using (var cmd = new NpgsqlCommand(dishSql, connection))
        {
            var count = (long)(await cmd.ExecuteScalarAsync() ?? 0);
            Console.WriteLine($"üçΩÔ∏è  –ë–ª—é–¥ –≤ –º–µ–Ω—é: {count}");
        }
        
        Console.WriteLine("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!");
        Console.WriteLine("\nüìç –î–æ—Å—Ç—É–ø:");
        Console.WriteLine("   Frontend: http://localhost:3000");
        Console.WriteLine("   Backend API: http://localhost:3001/api");
        Console.WriteLine("   Swagger: http://localhost:3001/swagger");
        Console.WriteLine("\nüîê –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:");
        Console.WriteLine("   Admin: admin@restaurant.com / admin123");
        Console.WriteLine("   Waiter: waiter1@restaurant.com / waiter123");
        Console.WriteLine("   Client: client1@restaurant.com / client123");
    }
}
